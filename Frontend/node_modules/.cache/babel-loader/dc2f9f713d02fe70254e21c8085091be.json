{"ast":null,"code":"import { GET_USER, UPDATE_USER, UPDATE_PROFILEPIC, GET_ALLUSER } from \"./types\";\nimport axios from \"axios\";\nimport backendServer from \"../backendServer\";\nexport const getUser = () => dispatch => {\n  axios.get(`${backendServer}/yelp/userProfile/${localStorage.getItem(\"user_id\")}`).then(response => dispatch({\n    type: GET_USER,\n    payload: response.data\n  })).catch(error => {\n    console.log(error);\n  });\n};\nexport const updateUser = userProfileData => dispatch => {\n  axios.defaults.withCredentials = true;\n  axios.post(`${backendServer}/yelp/userProfile/update/${localStorage.getItem(\"user_id\")}`, userProfileData).then(response => dispatch({\n    type: UPDATE_USER,\n    payload: response.data\n  })).catch(error => {\n    if (error.response && error.response.data) {\n      return dispatch({\n        type: UPDATE_USER,\n        payload: error.response.data\n      });\n    }\n\n    return;\n  });\n};\nexport const updateProfilePic = userProfileData => dispatch => {\n  axios.defaults.withCredentials = true;\n  axios.post(`${backendServer}/yelp/userProfile/updateProfilePic`, userProfileData).then(response => dispatch({\n    type: UPDATE_PROFILEPIC,\n    payload: response.data\n  })).catch(error => {\n    if (error.response && error.response.data) {\n      return dispatch({\n        type: UPDATE_PROFILEPIC,\n        payload: error.response.data\n      });\n    }\n\n    return;\n  });\n};\nexport const getAlluser = () => dispatch => {\n  axios.get(`${backendServer}/yelp/userProfile/allUsers/${localStorage.getItem(\"user_id\")}`).then(response => dispatch({\n    type: GET_ALLUSER,\n    payload: response.data\n  })).catch(error => {\n    console.log(error);\n  });\n};","map":{"version":3,"sources":["/Users/rakshithasathyakumar/Desktop/yelp-master/Frontend/src/actions/userProfileAction.js"],"names":["GET_USER","UPDATE_USER","UPDATE_PROFILEPIC","GET_ALLUSER","axios","backendServer","getUser","dispatch","get","localStorage","getItem","then","response","type","payload","data","catch","error","console","log","updateUser","userProfileData","defaults","withCredentials","post","updateProfilePic","getAlluser"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,iBAAhC,EAAmDC,WAAnD,QAAqE,SAArE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAMC,QAAQ,IAAI;AACrCH,EAAAA,KAAK,CAACI,GAAN,CAAW,GAAEH,aAAc,qBAAoBI,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAgC,EAA/E,EACKC,IADL,CACUC,QAAQ,IAAIL,QAAQ,CAAC;AACvBM,IAAAA,IAAI,EAAEb,QADiB;AAEvBc,IAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFK,GAAD,CAD9B,EAKKC,KALL,CAKWC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAPL;AAQH,CATM;AAWP,OAAO,MAAMG,UAAU,GAAIC,eAAD,IAAqBd,QAAQ,IAAI;AACvDH,EAAAA,KAAK,CAACkB,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AACAnB,EAAAA,KAAK,CAACoB,IAAN,CAAY,GAAEnB,aAAc,4BAA2BI,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAgC,EAAvF,EAA0FW,eAA1F,EACKV,IADL,CACUC,QAAQ,IAAIL,QAAQ,CAAC;AACvBM,IAAAA,IAAI,EAAEZ,WADiB;AAEvBa,IAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFK,GAAD,CAD9B,EAKKC,KALL,CAKWC,KAAK,IAAI;AACZ,QAAIA,KAAK,CAACL,QAAN,IAAkBK,KAAK,CAACL,QAAN,CAAeG,IAArC,EAA2C;AACvC,aAAOR,QAAQ,CAAC;AACZM,QAAAA,IAAI,EAAEZ,WADM;AAEZa,QAAAA,OAAO,EAAEG,KAAK,CAACL,QAAN,CAAeG;AAFZ,OAAD,CAAf;AAIH;;AACD;AACH,GAbL;AAcH,CAhBM;AAkBP,OAAO,MAAMU,gBAAgB,GAAIJ,eAAD,IAAqBd,QAAQ,IAAI;AAC7DH,EAAAA,KAAK,CAACkB,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AACAnB,EAAAA,KAAK,CAACoB,IAAN,CAAY,GAAEnB,aAAc,oCAA5B,EAAiEgB,eAAjE,EACKV,IADL,CACUC,QAAQ,IAAIL,QAAQ,CAAC;AACvBM,IAAAA,IAAI,EAAEX,iBADiB;AAEvBY,IAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFK,GAAD,CAD9B,EAKKC,KALL,CAKWC,KAAK,IAAI;AACZ,QAAIA,KAAK,CAACL,QAAN,IAAkBK,KAAK,CAACL,QAAN,CAAeG,IAArC,EAA2C;AACvC,aAAOR,QAAQ,CAAC;AACZM,QAAAA,IAAI,EAAEX,iBADM;AAEZY,QAAAA,OAAO,EAAEG,KAAK,CAACL,QAAN,CAAeG;AAFZ,OAAD,CAAf;AAIH;;AACD;AACH,GAbL;AAcH,CAhBM;AAkBP,OAAO,MAAMW,UAAU,GAAG,MAAMnB,QAAQ,IAAI;AACxCH,EAAAA,KAAK,CAACI,GAAN,CAAW,GAAEH,aAAc,8BAA6BI,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAgC,EAAxF,EACKC,IADL,CACUC,QAAQ,IAAIL,QAAQ,CAAC;AACvBM,IAAAA,IAAI,EAAEV,WADiB;AAEvBW,IAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFK,GAAD,CAD9B,EAKKC,KALL,CAKWC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAPL;AAQH,CATM","sourcesContent":["import { GET_USER, UPDATE_USER, UPDATE_PROFILEPIC, GET_ALLUSER} from \"./types\";\nimport axios from \"axios\";\nimport backendServer from \"../backendServer\";\n\nexport const getUser = () => dispatch => {\n    axios.get(`${backendServer}/yelp/userProfile/${localStorage.getItem(\"user_id\")}`)\n        .then(response => dispatch({\n            type: GET_USER,\n            payload: response.data\n        }))\n        .catch(error => {\n            console.log(error);\n        });\n}\n\nexport const updateUser = (userProfileData) => dispatch => {\n    axios.defaults.withCredentials = true;\n    axios.post(`${backendServer}/yelp/userProfile/update/${localStorage.getItem(\"user_id\")}`, userProfileData)\n        .then(response => dispatch({\n            type: UPDATE_USER,\n            payload: response.data\n        }))\n        .catch(error => {\n            if (error.response && error.response.data) {\n                return dispatch({\n                    type: UPDATE_USER,\n                    payload: error.response.data\n                });\n            }\n            return;\n        });\n}\n\nexport const updateProfilePic = (userProfileData) => dispatch => {\n    axios.defaults.withCredentials = true;\n    axios.post(`${backendServer}/yelp/userProfile/updateProfilePic`, userProfileData)\n        .then(response => dispatch({\n            type: UPDATE_PROFILEPIC,\n            payload: response.data\n        }))\n        .catch(error => {\n            if (error.response && error.response.data) {\n                return dispatch({\n                    type: UPDATE_PROFILEPIC,\n                    payload: error.response.data\n                });\n            }\n            return;\n        });\n}\n\nexport const getAlluser = () => dispatch => {\n    axios.get(`${backendServer}/yelp/userProfile/allUsers/${localStorage.getItem(\"user_id\")}`)\n        .then(response => dispatch({\n            type: GET_ALLUSER,\n            payload: response.data\n        }))\n        .catch(error => {\n            console.log(error);\n        });\n}\n\n"]},"metadata":{},"sourceType":"module"}